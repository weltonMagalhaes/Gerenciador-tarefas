-- Oracle Database 21c Express Edition Release 21.0.0.0.0 - Production

-- CONECT-SE COMO SYS OU SYSTEM PRIMEIRO PARA CRIAR O USUÁRIO
-- SQLPLUS SYSTEM/SUA SENHA @LOCALHOST:1521/XE


-- ===========================================
-- 1) CRIAR USUÁRIO E PRIVILÉGIOS
-- ===========================================
    CREATE USER GERENCIADOR_TAREFA IDENTIFIED BY "SENHA AQUI"
        DEFAULT TABLESPACE USERS
        TEMPORARY TABLESPACE TEMP
        QUOTA UNLIMITED ON USERS;

    -- PRIVILEGIOS BÁSICOS
    GRANT CREATE SESSION TO GERENCIADOR_TAREFA;

    -- PRIVILÉGIOS DE OBJETOS QUE VOCÊ VAI PRECISAR
    GRANT CREATE TABLE, CREATE VIEW, CREATE PROCEDURE, CREATE SEQUENCE, CREATE TRIGGER TO GERENCIADOR_TAREFA;

    -- LEGADOS 
    -- GRANT CONNECT, RESOURCE TO GERENCIADOR_TAREFA


-- ==================================

--VISÃO DE ALTO NÍVEL

    -- USUARIO
    -- Quem usa o sistema.

    -- STATUS_TAREFA (lookup)
    -- Valores de status (A Fazer, Em Progresso, Pausada, Concluída, Cancelada).

    -- PRIORIDADE (lookup)
    -- Baixa/Média/Alta/Urgente (pode ajustar depois).

    -- TAREFA
    -- Registro principal: título, descrição, prazo estimado, estimativa de esforço, status, prioridade…
    -- Trigger de pós-insert cria automaticamente uma contagem ativa e um apontamento de tempo inicial.

    -- APONTAMENTO_TEMPO
    -- Cada intervalo de trabalho (início/fim, minutos). Se fim for NULL, é um timer em andamento.

    -- CONTAGEM_ATIVA
    -- Controle “quem está cronometrando o quê” no momento. Garante uma contagem ativa por (usuário, tarefa).

    -- HISTORICO_STATUS
    -- Trilha quando/por quem o status foi alterado (auditoria leve).

-- ==================================


-- ==================================
--  LOOKUPS
-- ==================================

--  CRIA UAMA SEQUENCE NO ORACLE, QUE É UM OBJETO DE BANCO DE DADOS USADO PARA GERAR NÚMEROS SEQUENCIAIS ÚNICOS AUTOMATICAMENTE
CREATE SEQUENCE SEQ_STATUS_TAREFA START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_PRIORIDADE START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_USUARIO START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_TAREFA START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_APONTAMENTO_TEMPO START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_HISTORICO_STATUS START WITH 1 INCREMENT BY 1;

-- ==================================
-- 1) STATUS_TAREFA
-- ==================================

-- CRIAÇÃO DA TABELA STATUS_TAREFA
CREATE TABLE STATUS_TAREFA (
  ID          NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  NOME        VARCHAR2(50) NOT NULL,
  ORDEM_EXIB  NUMBER(4) DEFAULT 0 NOT NULL
);

--  COMENTÁRIOS NA TABELA STATUS_TAREFA
COMMENT ON TABLE  STATUS_TAREFA IS 'Status possíveis de tarefas';

--  COMENTARÁRIOS NAS COLUNAS 
COMMENT ON COLUMN STATUS_TAREFA.ID        IS 'Identificador do status';
COMMENT ON COLUMN STATUS_TAREFA.NOME      IS 'Nome do status (A FAZER, EM PROGRESSO, etc.)';
COMMENT ON COLUMN STATUS_TAREFA.ORDEM_EXIB IS 'Ordem de exibição';

-- POPULANDO TABELA STATUS_TAREFA
INSERT INTO STATUS_TAREFA (NOME, ORDEM_EXIB) VALUES ('A FAZER',       1);
INSERT INTO STATUS_TAREFA (NOME, ORDEM_EXIB) VALUES ('EM PROGRESSO',  2);
INSERT INTO STATUS_TAREFA (NOME, ORDEM_EXIB) VALUES ('PAUSADA',       3);
INSERT INTO STATUS_TAREFA (NOME, ORDEM_EXIB) VALUES ('CONCLUÍDA',     4);
INSERT INTO STATUS_TAREFA (NOME, ORDEM_EXIB) VALUES ('CANCELADA',     5);


-- CREAÇÃO DA TABELA PRIORIDADE
-- ==================================
-- 2) PRIORIDADE
-- ==================================

CREATE TABLE PRIORIDADE (
  ID          NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  NOME        VARCHAR2(30) NOT NULL,
  ORDEM_EXIB  NUMBER(4) DEFAULT 0 NOT NULL
);

--  COMENTÁRIOS NA TABELA PRIORIDADE
COMMENT ON TABLE  PRIORIDADE IS 'Prioridades das tarefas';
--  COMENTARÁRIOS NAS COLUNAS 
COMMENT ON COLUMN PRIORIDADE.ID         IS 'Identificador da prioridade';
COMMENT ON COLUMN PRIORIDADE.NOME       IS 'Nome da prioridade (BAIXA/MÉDIA/ALTA/URGENTE)';
COMMENT ON COLUMN PRIORIDADE.ORDEM_EXIB IS 'Ordem de exibição';

-- POPULANDO TABELA PRIORIDADE
INSERT INTO PRIORIDADE (NOME, ORDEM_EXIB) VALUES ('URGENTE', 1);
INSERT INTO PRIORIDADE (NOME, ORDEM_EXIB) VALUES ('ALTA',    2);
INSERT INTO PRIORIDADE (NOME, ORDEM_EXIB) VALUES ('MÉDIA',   3);
INSERT INTO PRIORIDADE (NOME, ORDEM_EXIB) VALUES ('BAIXA',   4);


-- CRIAÇÃO DA TABELA USUARIO
-- ==================================
-- 3) USUARIO
-- ==================================
CREATE TABLE USUARIO (
  ID          NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  NOME        VARCHAR2(120) NOT NULL,
  EMAIL       VARCHAR2(150) NOT NULL,
  SENHA_HASH  VARCHAR2(200),
  ATIVO       CHAR(1) DEFAULT 'S' CHECK (ATIVO IN ('S','N')),
  DATA_CRIACAO   TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL
);

ALTER TABLE USUARIO ADD CONSTRAINT UQ_USUARIO_EMAIL UNIQUE (EMAIL);

COMMENT ON TABLE  USUARIO IS 'Usuários do sistema';
COMMENT ON COLUMN USUARIO.EMAIL IS 'Único por usuário';


-- COMENTÁRIOS NAS COLUNAS 

COMMENT ON COLUMN USUARIO.ID IS 'Indentificador único do registro do usuario na tebela (chave primária)';
COMMENT ON COLUMN USUARIO.NOME IS 'Nome completo do usuario';
COMMENT ON COLUMN USUARIO.EMAIL IS 'EMAIL do usuário';
COMMENT ON COLUMN USUARIO.SENHA_HASH IS 'Senha criptografada do usuario';
COMMENT ON COLUMN USUARIO.ATIVO IS 'Flag para registro se o usuario se encontra ativo "S" sim ou "N" não por padrão fica regsitardo com S';
COMMENT ON COLUMN USUARIO.DATA_CRIACAO IS 'Data criação do registro';

-- CRIAÇÃO DA TABELA TAREFA
-- ==================================
-- 4) TAREFA
-- ==================================
CREATE TABLE TAREFA (
  ID                   NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  ID_USUARIO_CRIADOR   NUMBER NOT NULL,
  ID_USUARIO_RESP      NUMBER,
  ID_STATUS            NUMBER NOT NULL,
  ID_PRIORIDADE        NUMBER,
  TITULO               VARCHAR2(200) NOT NULL,
  DESCRICAO            CLOB,
  PRAZO_PREVISTO       DATE,
  ESTIMATIVA_MINUTOS   NUMBER,
  DATA_INICIO          TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
  DATA_ATUALIZACAO     TIMESTAMP,
  DATA_INICIO          TIMESTAMP,
  DATA_FIM             TIMESTAMP,
  CONSTRAINT FK_TAR_USU_CRIADOR FOREIGN KEY (ID_USUARIO_CRIADOR) REFERENCES USUARIO(ID),
  CONSTRAINT FK_TAR_USU_RESP    FOREIGN KEY (ID_USUARIO_RESP)    REFERENCES USUARIO(ID),
  CONSTRAINT FK_TAR_STATUS      FOREIGN KEY (ID_STATUS)          REFERENCES STATUS_TAREFA(ID),
  CONSTRAINT FK_TAR_PRIORIDADE  FOREIGN KEY (ID_PRIORIDADE)      REFERENCES PRIORIDADE(ID)
);

CREATE INDEX IX_TAREFA_STATUS ON TAREFA (ID_STATUS);
CREATE INDEX IX_TAREFA_RESP   ON TAREFA (ID_USUARIO_RESP);
CREATE INDEX IX_TAREFA_PRAZO  ON TAREFA (PRAZO_PREVISTO);

COMMENT ON TABLE  TAREFA IS 'Tarefas com prazo e estimativa; pode abrir contagem automática';


-- CRIAÇÃO DA TABELA APENTAMENTO_TEMPO
-- ==================================
-- 5) APENTAMENTO_TEMPO
-- ==================================
-- CADA INTEVALO DE TRABALHO. SE DATA_CONCLUSAO FOR NULL O APANTAMENTO ESTÁ EM ANDAMENTO
CREATE TABLE APONTAMENTO_TEMPO (
  ID           NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  ID_TAREFA    NUMBER NOT NULL,
  ID_USUARIO   NUMBER NOT NULL,
  DATA_INICIO  TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
  DATA_FIM     TIMESTAMP,
  MINUTOS      NUMBER GENERATED ALWAYS AS
                 (CASE WHEN DATA_FIM IS NOT NULL
                       THEN ROUND((DATA_FIM - DATA_INICIO) * 24 * 60)
                       ELSE NULL END) VIRTUAL,
  DESCRICAO    VARCHAR2(300),
  CONSTRAINT FK_APONT_TAREFA  FOREIGN KEY (ID_TAREFA)  REFERENCES TAREFA(ID),
  CONSTRAINT FK_APONT_USUARIO FOREIGN KEY (ID_USUARIO) REFERENCES USUARIO(ID),
  CONSTRAINT CK_APONT_TEMPO   CHECK (DATA_FIM IS NULL OR DATA_FIM >= DATA_INICIO)
);

CREATE INDEX IX_APONT_TAREFA ON APONTAMENTO_TEMPO (ID_TAREFA);
CREATE INDEX IX_APONT_USER   ON APONTAMENTO_TEMPO (ID_USUARIO);
CREATE INDEX IX_APONT_OPEN   ON APONTAMENTO_TEMPO (ID_TAREFA, ID_USUARIO, DATA_FIM);

COMMENT ON TABLE APONTAMENTO_TEMPO IS 'Intervalos de trabalho. DATA_FIM NULL = em andamento';



-- CRIAÇÃO DA TABELA CONTAGEM_ATIVA
-- ==================================
-- 6) CONTAGEM_ATIVA
-- ==================================
-- GARANTE 1 CONTAGEM ATIVA POR (USUARIO, TAREFA).
CREATE TABLE CONTAGEM_ATIVA (
  ID_TAREFA    NUMBER NOT NULL,
  ID_USUARIO   NUMBER NOT NULL,
  DATA_INICIO  TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
  ORIGEM       VARCHAR2(20) DEFAULT 'AUTO' NOT NULL,
  CONSTRAINT PK_CONTAGEM_ATIVA PRIMARY KEY (ID_TAREFA, ID_USUARIO),
  CONSTRAINT FK_CONT_ATV_TAR FOREIGN KEY (ID_TAREFA)  REFERENCES TAREFA(ID),
  CONSTRAINT FK_CONT_ATV_USU FOREIGN KEY (ID_USUARIO) REFERENCES USUARIO(ID),
  CONSTRAINT CK_CONT_ATV_ORIG CHECK (ORIGEM IN ('AUTO','MANUAL'))
);

COMMENT ON TABLE CONTAGEM_ATIVA IS 'Timer ativo por (usuário,tarefa)';


--CRIAÇÃO DA TABELA HISTÓRICO DE STATUS
-- ==================================
-- 6) HISTORICO_STATUS
-- ==================================
CREATE TABLE HISTORICO_STATUS (
  ID            NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  ID_TAREFA     NUMBER NOT NULL,
  ID_STATUS     NUMBER NOT NULL,
  DATA_ALTERACAO      TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
  ID_USUARIO    NUMBER,
  OBSERVACAO    VARCHAR2(300),
  CONSTRAINT FK_HIS_TAREFA  FOREIGN KEY (ID_TAREFA) REFERENCES TAREFA(ID),
  CONSTRAINT FK_HIS_STATUS  FOREIGN KEY (ID_STATUS) REFERENCES STATUS_TAREFA(ID),
  CONSTRAINT FK_HIS_USUARIO FOREIGN KEY (ID_USUARIO) REFERENCES USUARIO(ID)
);

CREATE INDEX IX_HIS_TAREFA ON HISTORICO_STATUS (ID_TAREFA, DATA_ALTERACAO);

COMMENT ON TABLE HISTORICO_STATUS IS 'Auditoria de mudanças de status';



CREATE OR REPLACE TRIGGER AI_TAREFA_INICIAR_CONTAGEM
AFTER INSERT ON TAREFA
FOR EACH ROW
DECLARE
  v_id_status_prog STATUS_TAREFA.ID%TYPE;
  v_id_status_afz  STATUS_TAREFA.ID%TYPE;
  v_id_usuario     USUARIO.ID%TYPE;
BEGIN
  SELECT ID INTO v_id_status_prog FROM STATUS_TAREFA WHERE UPPER(NOME) = 'EM PROGRESSO';
  SELECT ID INTO v_id_status_afz  FROM STATUS_TAREFA WHERE UPPER(NOME) = 'A FAZER';

  IF :NEW.ID_STATUS IN (v_id_status_prog, v_id_status_afz) THEN
    UPDATE TAREFA
       SET DATA_INICIO = NVL(DATA_INICIO, SYSTIMESTAMP)
     WHERE ID = :NEW.ID;

    v_id_usuario := NVL(:NEW.ID_USUARIO_RESP, :NEW.ID_USUARIO_CRIADOR);

    INSERT INTO CONTAGEM_ATIVA (ID_TAREFA, ID_USUARIO, DATA_ALTERACAO, ORIGEM)
    VALUES (:NEW.ID, v_id_usuario, SYSTIMESTAMP, 'AUTO');

    INSERT INTO APONTAMENTO_TEMPO (ID_TAREFA, ID_USUARIO, DATA_INICIO, DESCRICAO)
    VALUES (:NEW.ID, v_id_usuario, SYSTIMESTAMP, 'Início automático da tarefa');
  END IF;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    NULL; -- SE LOOKUPS AINDA NÃO EXISTIREM, APENAS NÃO INICIA 
/


-- TOTAL POR DIA/USUÁRIO (CONSIDERAR ABERTOS ATÉ AGORA)
CREATE OR REPLACE VIEW VW_TEMPO_DIA_USUARIO AS
SELECT
  u.id                                AS id_usuario,
  u.nome                              AS nome_usuario,
  TRUNC(NVL(a.data_fim, SYSTIMESTAMP)) AS dia,
  SUM(NVL(a.minutos,
          ROUND((SYSTIMESTAMP - a.data_inicio) * 24 * 60))) AS minutos_total
FROM APONTAMENTO_TEMPO a
JOIN USUARIO u ON u.id = a.id_usuario
GROUP BY u.id, u.nome, TRUNC(NVL(a.data_fim, SYSTIMESTAMP));

-- TOTAL POR TAREFA 
CREATE OR REPLACE VIEW VW_TEMPO_TAREFA AS
SELECT
  t.id,
  t.titulo,
  t.id_usuario_resp,
  SUM(NVL(a.minutos,
          ROUND((SYSTIMESTAMP - a.data_inicio) * 24 * 60))) AS minutos_total
FROM TAREFA t
LEFT JOIN APONTAMENTO_TEMPO a ON a.id_tarefa = t.id
GROUP BY t.id, t.titulo, t.id_usuario_resp;
